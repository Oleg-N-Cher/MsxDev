From: <Сохранено Windows Internet Explorer 8>
Subject: MSX BIOS calls
Date: Sat, 5 Jul 2014 22:45:26 +0300
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----=_NextPart_000_0000_01CF98A2.D02C1EB0"
X-MimeOLE: Produced By Microsoft MimeOLE V6.00.3790.4862

This is a multi-part message in MIME format.

------=_NextPart_000_0000_01CF98A2.D02C1EB0
Content-Type: text/html;
	charset="utf-8"
Content-Transfer-Encoding: quoted-printable
Content-Location: http://map.grauw.nl/resources/msxbios.php

=EF=BB=BF<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML xml:lang=3D"en" =
xmlns=3D"http://www.w3.org/1999/xhtml"><HEAD><TITLE>MSX BIOS =
calls</TITLE>
<META content=3D"text/html; charset=3DUTF-8" http-equiv=3DContent-type>
<META content=3Dtext/css http-equiv=3DContent-Style-Type><LINK =
rel=3Dstylesheet=20
type=3Dtext/css href=3D"http://map.grauw.nl/css/map.css"><LINK =
rel=3Dstylesheet=20
type=3Dtext/css href=3D"http://map.grauw.nl/css/print.css" =
media=3Dprint><LINK=20
title=3D"MAP Classic" rel=3Dstylesheet type=3Dtext/css=20
href=3D"http://map.grauw.nl/css/classic.css"><LINK title=3D"MAP Modern"=20
rel=3D"alternate stylesheet" type=3Dtext/css=20
href=3D"http://map.grauw.nl/css/modern.css"><LINK title=3D"MAP =
Experimental"=20
rel=3D"alternate stylesheet" type=3Dtext/css=20
href=3D"http://map.grauw.nl/css/experimental.css">
<META name=3DGENERATOR content=3D"MSHTML 8.00.6001.23216"></HEAD>
<BODY>
<H1 id=3Dhead>MSX Assembly Page</H1>
<DIV id=3Dmenu>
<UL>
  <LI><A href=3D"http://map.grauw.nl/">Main</A></LI>
  <LI><A href=3D"http://map.grauw.nl/articles/">Articles</A>=20
  <UL>
    <LI><A =
href=3D"http://map.grauw.nl/articles/#tutorials">Tutorials</A></LI>
    <LI><A =
href=3D"http://map.grauw.nl/articles/#articles">Articles</A></LI>
    <LI><A href=3D"http://map.grauw.nl/articles/#extarticles">External=20
    articles</A></LI></UL></LI>
  <LI><A href=3D"http://map.grauw.nl/resources/">Resources</A>=20
  <UL>
    <LI><A href=3D"http://map.grauw.nl/resources/#osdocs">OS=20
documentation</A></LI>
    <LI><A href=3D"http://map.grauw.nl/resources/#devicedocs">Device=20
    documentation</A></LI>
    <LI><A href=3D"http://map.grauw.nl/resources/#swdocs">Software=20
    documentation</A></LI></UL></LI>
  <LI><A href=3D"http://map.grauw.nl/sources/">Sources</A>=20
  <UL>
    <LI><A href=3D"http://map.grauw.nl/sources/#code">Code =
examples</A></LI>
    <LI><A href=3D"http://map.grauw.nl/sources/#source">Source =
code</A></LI>
    <LI><A href=3D"http://map.grauw.nl/sources/#extsources">External=20
    sources</A></LI></UL></LI>
  <LI><A href=3D"http://map.grauw.nl/links/">Links</A>=20
  <UL>
    <LI><A href=3D"http://map.grauw.nl/links/#communities">Development=20
    communities</A></LI>
    <LI><A href=3D"http://map.grauw.nl/links/#resources">Documentation=20
    resources</A></LI>
    <LI><A href=3D"http://map.grauw.nl/links/#tools">Programming=20
  tools</A></LI></UL></LI>
  <LI><A =
href=3D"http://map.grauw.nl/contributing/">Contributing</A></LI></UL></DI=
V>
<DIV id=3Dcontent>
<H1>MSX BIOS calls</H1>
<P>This is an overview of all official MSX BIOS calls.</P>
<UL>
  <LI><A href=3D"http://map.grauw.nl/resources/msxbios.php#msx1bios">MSX =
1=20
  BIOS</A> (up till function call #159)</LI>
  <LI><A href=3D"http://map.grauw.nl/resources/msxbios.php#msx2bios">MSX =
2=20
  BIOS</A> (up till function call #177)</LI>
  <LI><A =
href=3D"http://map.grauw.nl/resources/msxbios.php#msx2pbios">MSX 2+=20
  BIOS</A> (up till function call #17D)</LI>
  <LI><A =
href=3D"http://map.grauw.nl/resources/msxbios.php#msxtrbios">MSX turbo R =

  BIOS</A> (up till function call #189)</LI></UL>
<H1 id=3Dmsx1bios>MSX 1 BIOS Entries</H1>
<H2>RST-and other routines</H2>
<H3 id=3DCHKRAM>CHKRAM (also called STARTUP, RESET or =
BOOT)</H3><PRE>Address  : #0000
Function : Tests RAM and sets RAM slot for the system
Registers: All
Remark   : After this, a jump must be made to INIT, for further =
initialisation.
</PRE>
<H3 id=3DSYNCHR>SYNCHR</H3><PRE>Address  : #0008
Function : tests whether the character of [HL] is the specified =
character
           if not, it generates SYNTAX ERROR, otherwise it goes to =
CHRGTR (#0010)
Input    : set the character to be tested in [HL] and the character to =
be
           compared next to RST instruction which calls this routine =
(inline parameter)
Output   : HL is increased by one and A receives [HL], When the tested =
character is
           numerical, the CY flag is set the end of the statement (00h =
or 3Ah) causes
           the Z flag to be set
Registers: AF, HL
</PRE>
<H3 id=3DRDSLT>RDSLT</H3><PRE>Address  : #000C
Function : Reads the value of an address in another slot
Input    : A  - ExxxSSPP
           |        || Primary  slotnumber  (00-11)
           |        - Secundary slotnumber (00-11)
           +----------- Expanded slot (0 =3D no, 1 =3D yes)
           HL - Address to read
Output   : A  - Contains the vaule of the read address
Registers: AF, C, DE
Remark   : This routine turns off the interupt, but won't turn it on =
again
</PRE>
<H3 id=3DCHRGTR>CHRGTR</H3><PRE>Address  : #0010
Function : Gets the next character (or token) of the Basic-text
Input    : HL - Address last character
Output   : HL - points to the next character
           A  - contains the character
           C  - flag set if it's a number
           Z  - flag set if it's the end of the statement
Registers: AF, HL
</PRE>
<H3 id=3DWRSLT>WRSLT</H3><PRE>Address  : #0014
Function : Writes a value to an address in another slot.
Input    : A  - Slot in which the value will be written
           see RDSLT for input
           HL - Address of value to write
           E  - value to write
Registers: AF, BC, D
Remark   : See RDSLT
</PRE>
<H3 id=3DOUTDO>OUTDO</H3><PRE>Address  : #0018
Function : Output to current outputchannel (printer, diskfile, etc.)
Input    : A  - PRTFIL, PRTFLG
Remark   : Used in basic, in ML it's pretty difficult
</PRE>
<H3 id=3DCALSLT>CALSLT</H3><PRE>Address  : #001C
Function : Executes inter-slot call.
Input    : IY - High byte with input for A in RDSLT
           IX - The address that will be called
Remark   : Variables can never be given in alternative registers
           of the Z-80 or IX and IY
</PRE>
<H3 id=3DDCOMPR>DCOMPR</H3><PRE>Address  : #0020
Function : Compares HL with DE
Input    : HL, DE
Output   : Z-flag set if HL and DE are the same.
Registers: AF
</PRE>
<H3 id=3DENASLT>ENASLT</H3><PRE>Address  : #0024
Function : Switches indicated slot at indicated page on perpetual
Input    : A  - ExxxSSPP
                +-?------ see RDSLT
           H - Bit 6 and 7 must contain the page number (00-11)
</PRE>
<H3 id=3DGETYPR>GETYPR</H3><PRE>Address  : #0028
Function : Returns Type of DAC
Input    : DAC
Output   : S,Z,P/V, CY
Registers: AF
Remark   : Not a very clear routine to me, please mail us if you know =
more about it.
</PRE>
<H3 id=3DCALLF>CALLF</H3><PRE>Address  : #0030
Function : Executes an interslot call
Output   : depends on the calling routine
Registers: AF, and the other registers depending on the calling routine
Remark   : The following is the calling sequence:
           RST #30
           DB destination slot (see RDSLT accu)
           DW destination address
</PRE>
<H3 id=3DKEYINT>KEYINT</H3><PRE>Address  : #0038
Function : Executes the timer interrupt process routine
</PRE>
<H2>Initialization-routines</H2>
<H3 id=3DINITIO>INITIO</H3><PRE>Address  : #003B
Function : Initialises the device
Registers: All
</PRE>
<H3 id=3DINIFNK>INIFNK</H3><PRE>Address  : #003E
Function : Initialises the contents of the function keys
Registers: All
</PRE>
<H2>VDP routines</H2>
<H3 id=3DDISSCR>DISSCR</H3><PRE>Address  : #0041
Function : inhibits the screen display
Registers: AF, BC
</PRE>
<H3 id=3DENASCR>ENASCR</H3><PRE>Address  : #0044
Function : displays the screen
Registers: AF, BC
</PRE>
<H3 id=3DWRTVDP>WRTVDP</H3><PRE>Address  : #0047
Function : write data in the VDP-register
Input    : B  - data to write
           C  - number of the register
Registers: AF, BC
</PRE>
<H3 id=3DRDVRM>RDVRM</H3><PRE>Address  : #004A
Function : Reads the content of VRAM
Input    : HL - address read
Output   : A  - value which was read
Registers: AF
</PRE>
<H3 id=3DWRTVRM>WRTVRM</H3><PRE>Address  : #004D
Function : Writes data in VRAM
Input    : HL - address write
           A  - value write
Registers: AF
</PRE>
<H3 id=3DSETRD>SETRD</H3><PRE>Address  : #0050
Function : Enable VDP to read
Input    : HL - for VRAM-address
Registers: AF
</PRE>
<H3 id=3DSETWRT>SETWRT</H3><PRE>Address  : #0053
Function : Enable VDP to write
Input    : HL - Address
Registers: AF
</PRE>
<H3 id=3DFILVRM>FILVRM</H3><PRE>Address  : #0056
Function : fill VRAM with value
Input    : A  - data byte
           BC - length of the area to be written
           HL - start address
Registers: AF, BC
</PRE>
<H3 id=3DLDIRMV>LDIRMV</H3><PRE>Address  : #0059
Function : Block transfer to memory from VRAM
Input    : BC - blocklength
           DE - Start address of memory
           HL - Start address of VRAM
Registers: All
</PRE>
<H3 id=3DLDIRVM>LDIRVM</H3><PRE>Address  : #005C
Function : Block transfer to VRAM from memory
Input    : BC - blocklength
           DE - Start address of VRAM
           HL - Start address of memory
Registers: All
</PRE>
<H3 id=3DCHGMOD>CHGMOD</H3><PRE>Address  : #005F
Function : Switches to given screenmode
Input    : A  - screen mode
Registers: All
</PRE>
<H3 id=3DCHGCLR>CHGCLR</H3><PRE>Address  : #0062
Function : Changes the screencolors
Input    : Foregroundcolor in FORCLR
           Backgroundcolor in BAKCLR
           Bordercolor in BDRCLR
Registers: All
</PRE>
<H3 id=3DNMI>NMI</H3><PRE>Address  : #0066
Function : Executes (non-maskable interupt) handling routine
</PRE>
<H3 id=3DCLRSPR>CLRSPR</H3><PRE>Address  : #0069
Function : Initialises all sprites
Input    : SCRMOD
Registers: Alles
</PRE>
<H3 id=3DINITXT>INITXT</H3><PRE>Address  : #006C
Function : Schakelt naar SCREEN 0 (tekst-scherm met 40*24 tekens)
Input    : TXTNAM, TXTCGP
Registers: All
</PRE>
<H3 id=3DINIT32>INIT32</H3><PRE>Address  : #006F
Function : Switches to SCREEN 1 (text screen with 32*24 characters)
Input    : T32NAM, T32CGP, T32COL, T32ATR, T32PAT
Registers: All
</PRE>
<H3 id=3DINIGRP>INIGRP</H3><PRE>Address  : #0072
Function : Switches to SCREEN 2 (high resolution screen with 256*192 =
pixels)
Input    : GRPNAM, GRPCGP, GRPCOL, GRPATR, GRPPAT
Registers: All
</PRE>
<H3 id=3DINIMLT>INIMLT</H3><PRE>Address  : #0075
Function : Switches to SCREEN 3 (multi-color screen 64*48 pixels)
Input    : MLTNAM, MLTCGP, MLTCOL, MLTATR, MLTPAT
Registers: All
</PRE>
<H3 id=3DSETTXT>SETTXT</H3><PRE>Address  : #0078
Function : Switches to VDP in SCREEN 0 mode
Input    : See INITXT
Registers: All
</PRE>
<H3 id=3DSETT32>SETT32</H3><PRE>Address  : #007B
Function : Schakelt VDP in SCREEN 1 modus
Input    : See INIT32
Registers: All
</PRE>
<H3 id=3DSETGRP>SETGRP</H3><PRE>Address  : #007E
Function : Switches VDP to SCREEN 2 mode
Input    : See INIGRP
Registers: All
</PRE>
<H3 id=3DSETMLT>SETMLT</H3><PRE>Address  : #0081
Function : Switches VDP to SCREEN 3 mode
Input    : See INIMLT
Registers: All
</PRE>
<H3 id=3DCALPAT>CALPAT</H3><PRE>Address  : #0084
Function : Returns the address of the sprite pattern table
Input    : A  - Sprite ID
Output   : HL - For the address
Registers: AF, DE, HL
</PRE>
<H3 id=3DCALATR>CALATR</H3><PRE>Address  : #0087
Function : Returns the address of the sprite attribute table
Input    : A  - Sprite number
Output   : HL - For the address
Registers: AF, DE, HL
</PRE>
<H3 id=3DGSPSIZ>GSPSIZ</H3><PRE>Address  : #008A
Function : Returns current sprite size
Output   : A  - Sprite-size in bytes
           C-flag set when size is 16*16 sprites otherwise C-flag is =
reset
Registers: AF
</PRE>
<H3 id=3DGRPPRT>GRPPRT</H3><PRE>Address  : #008D
Function : Displays a character on the graphic screen
Input    : A  - ASCII value of the character to print
</PRE>
<H2>PSG routines</H2>
<H3 id=3DGICINI>GICINI</H3><PRE>Address  : #0090
Function : Initialises PSG and sets initial value for the PLAY statement
Registers: All
</PRE>
<H3 id=3DWRTPSG>WRTPSG</H3><PRE>Address  : #0093
Function : Writes data to PSG-register
Input    : A  - PSG register number
           E  - data write
</PRE>
<H3 id=3DRDPSG>RDPSG</H3><PRE>Address  : #0096
Function : Reads value from PSG-register
Input    : A  - PSG-register read
Output   : A  - value read
</PRE>
<H3 id=3DSTRTMS>STRTMS</H3><PRE>Address  : #0099
Function : Tests whether the PLAY statement is being executed as a =
background
           task. If not, begins to execute the PLAY statement
Registers: All
</PRE>
<H2>Console routines</H2>
<H3 id=3DCHSNS>CHSNS</H3><PRE>Address  : #009C
Function : Tests the status of the keyboard buffer
Output   : Z-flag set if buffer is empty, otherwise not set
Registers: AF
</PRE>
<H3 id=3DCHGET>CHGET</H3><PRE>Address  : #009F
Function : One character input (waiting)
Output   : A  - ASCII-code of the input character
Registers: AF
</PRE>
<H3 id=3DCHPUT>CHPUT</H3><PRE>Address  : #00A2
Function : Displays one character
Input    : A  - ASCII-code of character to display
</PRE>
<H3 id=3DLPTOUT>LPTOUT</H3><PRE>Address  : #00A5
Function : Sends one character to printer
Input    : A  - ASCII-code of character to send
Output   : C-flag set if failed
Registers: F
</PRE>
<H3 id=3DLPTSTT>LPTSTT</H3><PRE>Address  : #00A8
Function : Tests printer status
Output   : A  - #FF and Z-flag reset if printer is ready
                #00 and Z-flag set if not ready
Registers: AF
</PRE>
<H3 id=3DCNVCHR>CNVCHR</H3><PRE>Address  : #00AB
Function : tests for the graphic header and transforms the code
Input    : A  - charactercode
Output   : the C-flag is reset to not the graphic reader
           the C-flag and Z-flag are set to the transformed code is set =
in A
           the C-flag is set and Z-flag is reset to the untransformed =
code is set in A
Registers: AF
</PRE>
<H3 id=3DPINLIN>PINLIN</H3><PRE>Address  : #00AE
Function : Stores in the specified buffer the character codes input =
until the return
           key or STOP key is pressed
Output   : HL - for the starting address of the buffer -1
           C-flag set when it ends with the STOP key
Registers: All
</PRE>
<H3 id=3DINLIN>INLIN</H3><PRE>Address  : #00B1
Function : Same as PINLIN except that AUGFLG (#F6AA) is set
Output   : HL - for the starting address of the buffer -1
           C-flag set when it ends with the STOP key
Registers: All
</PRE>
<H3 id=3DQINLIN>QINLIN</H3><PRE>Address  : #00B4
Function : Prints a questionmark andone space
Output   : HL - for the starting address of the buffer -1
           C-flag set when it ends with the STOP key
Registers: All
</PRE>
<H3 id=3DBREAKX>BREAKX</H3><PRE>Address  : #00B7
Function : Tests status of CTRL-STOP
Output   : C-flag set when pressed
Registers: AF
Remark   : In this routine, interrupts are inhibited
</PRE>
<H3 id=3DISCNTC>ISCNTC</H3><PRE>Address  : #00BA
Function : Tests status of SHIFT-STOP
</PRE>
<H3 id=3DCKCNTC>CKCNTC</H3><PRE>Address  : #00BD
Function : Same as ISCNTC. used in Basic
</PRE>
<H3 id=3DBEEP>BEEP</H3><PRE>Address  : #00C0
Function : generates beep
Registers: All
</PRE>
<H3 id=3DCLS>CLS</H3><PRE>Address  : #00C3
Function : Clears the screen
Registers: AF, BC, DE
Remark   : Z-flag must be set to be able to run this routine
           XOR A will do fine most of the time
</PRE>
<H3 id=3DPOSIT>POSIT</H3><PRE>Address  : #00C6
Function : Plaatst cursor op aangegeven positie
Input    : H  - Y coordinate of cursor
           L  - X coordinate of cursor
Registers: AF
</PRE>
<H3 id=3DFNKSB>FNKSB</H3><PRE>Address  : #00C9
Function : Tests whether the function key display is active (FNKFLG)
           If so, displays them, otherwise erase them
Input    : FNKFLG (#FBCE)
Registers: All
</PRE>
<H3 id=3DERAFNK>ERAFNK</H3><PRE>Address  : #00CC
Function : Erase functionkey display
Registers: All
</PRE>
<H3 id=3DDSPFNK>DSPFNK</H3><PRE>Address  : #00CF
Function : Displays the function keys
Registers: All
</PRE>
<H3 id=3DTOTEXT>TOTEXT</H3><PRE>Address  : #00D2
Function : Forces the screen to be in the text mode
Registers: All
</PRE>
<H2>Controller routines</H2>
<H3 id=3DGTSTCK>GTSTCK</H3><PRE>Address  : #00D5
Function : Returns the joystick status
Input    : A  - Joystick number to test (0 =3D cursors, 1 =3D port 1, 2 =
=3D port 2)
Output   : A  - Direction
Registers: All
</PRE>
<H3 id=3DGTTRIG>GTTRIG</H3><PRE>Address  : #00D8
Function : Returns current trigger status
Input    : A  - trigger button to test
           0 =3D spacebar
           1 =3D port 1, button A
           2 =3D port 2, button A
           3 =3D port 1, button B
           4 =3D port 2, button B
Output   : A  - #00 trigger button not pressed
                #FF trigger button pressed
Registers: AF
</PRE>
<H3 id=3DGTPAD>GTPAD</H3><PRE>Address  : #00DB
Function : Returns current touch pad status
Input    : A  - Touchpad number to test
Output   : A  - Value
Registers: All
</PRE>
<H3 id=3DGTPDL>GTPDL</H3><PRE>Address  : #00DE
Function : Returns currenct value of paddle
Input    : A  - Paddle number
Output   : A  - Value
Registers: All
</PRE>
<H2>Tape device routines</H2>
<H3 id=3DTAPION>TAPION</H3><PRE>Address  : #00E1
Function : Reads the header block after turning the cassette motor on
Output   : C-flag set if failed
Registers: All
</PRE>
<H3 id=3DTAPIN>TAPIN</H3><PRE>Address  : #00E4
Function : Read data from the tape
Output   : A  - read value
           C-flag set if failed
Registers: All
</PRE>
<H3 id=3DTAPIOF>TAPIOF</H3><PRE>Address  : #00E7
Function : Stops reading from the tape
</PRE>
<H3 id=3DTAPOON>TAPOON</H3><PRE>Address  : #00EA
Function : Turns on the cassette motor and writes the header
Input    : A  - #00 short header
            not #00 long header
Output   : C-flag set if failed
Registers: All
</PRE>
<H3 id=3DTAPOUT>TAPOUT</H3><PRE>Address  : #00ED
Function : Writes data on the tape
Input    : A  - data to write
Output   : C-flag set if failed
Registers: All
</PRE>
<H3 id=3DTAPOOF>TAPOOF</H3><PRE>Address  : #00F0
Function : Stops writing on the tape
</PRE>
<H3 id=3DSTMOTR>STMOTR</H3><PRE>Address  : #00F3
Function : Sets the cassette motor action
Input    : A  - #00 stop motor
                #01 start motor
                #FF reverse the current action
Registers: AF
</PRE>
<H2>Queue routines</H2>
<H3 id=3DLFTQ>LFTQ</H3><PRE>Address  : #00F6
Function : Gives number of bytes in queue
Output   : A  - length of queue in bytes
Remark   : Internal use
</PRE>
<H3 id=3DPUTQ>PUTQ</H3><PRE>Address  : #00F9
Function : Put byte in queue
Remark   : Internal use
</PRE>
<H2>Graphic routines</H2>
<H3 id=3DRIGHTC>RIGHTC</H3><PRE>Address  : #00FC
Function : Shifts screenpixel to the right
Registers: AF
</PRE>
<H3 id=3DLEFTC>LEFTC</H3><PRE>Address  : #00FF
Function : Shifts screenpixel to the left
Registers: AF
</PRE>
<H3 id=3DUPC>UPC</H3><PRE>Address  : #0102
Function : Shifts screenpixel up
Registers: AF
</PRE>
<H3 id=3DTUPC>TUPC</H3><PRE>Address  : #0105
Function : Tests whether UPC is possible, if possible, execute UPC
Output   : C-flag set if operation would end outside the screen
Registers: AF
</PRE>
<H3 id=3DDOWNC>DOWNC</H3><PRE>Address  : #0108
Function : Shifts screenpixel down
Registers: AF
</PRE>
<H3 id=3DTDOWNC>TDOWNC</H3><PRE>Address  : #010B
Function : Tests whether DOWNC is possible, if possible, execute DOWNC
Output   : C-flag set if operation would end outside the screen
Registers: AF
</PRE>
<H3 id=3DSCALXY>SCALXY</H3><PRE>Address  : #010E
Function : Scales X and Y coordinates
</PRE>
<H3 id=3DMAPXY>MAPXY</H3><PRE>Address  : #0111
Function : Places cursor at current cursor address
</PRE>
<H3 id=3DFETCHC>FETCHC</H3><PRE>Address  : #0114
Function : Gets current cursor addresses mask pattern
Output   : HL - Cursor address
           A  - Mask pattern
</PRE>
<H3 id=3DSTOREC>STOREC</H3><PRE>Address  : #0117
Function : Record current cursor addresses mask pattern
Input    : HL - Cursor address
           A  - Mask pattern
</PRE>
<H3 id=3DSETATR>SETATR</H3><PRE>Address  : #011A
Function : Set attribute byte
</PRE>
<H3 id=3DREADC>READC</H3><PRE>Address  : #011D
Function : Reads attribute byte of current screenpixel
</PRE>
<H3 id=3DSETC>SETC</H3><PRE>Address  : #0120
Function : Returns currenct screenpixel of specificed attribute byte
</PRE>
<H3 id=3DNSETCX>NSETCX</H3><PRE>Address  : #0123
Function : Set horizontal screenpixels
</PRE>
<H3 id=3DGTASPC>GTASPC</H3><PRE>Address  : #0126
Function : Gets screen relations
Output   : DE, HL
Registers: DE, HL
</PRE>
<H3 id=3DPNTINI>PNTINI</H3><PRE>Address  : #0129
Function : Initalises the PAINT instruction
</PRE>
<H3 id=3DSCANR>SCANR</H3><PRE>Address  : #012C
Function : Scans screenpixels to the right
</PRE>
<H3 id=3DSCANL>SCANL</H3><PRE>Address  : #012F
Function : Scans screenpixels to the left
</PRE>
<H2>Misc routines</H2>
<H3 id=3DCHGCAP>CHGCAP</H3><PRE>Address  : #0132
Function : Alternates the CAP lamp status
Input    : A  - #00 is lamp on
            not #00 is lamp off
Registers: AF
</PRE>
<H3 id=3DCHGSND>CHGSND</H3><PRE>Address  : #0135
Function : Alternates the 1-bit sound port status
Input    : A  - #00 to turn off
            not #00 to turn on
Registers: AF
</PRE>
<H3 id=3DRSLREG>RSLREG</H3><PRE>Address  : #0138
Function : Reads the primary slot register
Output   : A  - for the value which was read
           33221100
           ||||||- Pagina 0 (#0000-#3FFF)
           ||||--- Pagina 1 (#4000-#7FFF)
           ||----- Pagina 2 (#8000-#BFFF)
           ------- Pagina 3 (#C000-#FFFF)
Registers: A
</PRE>
<H3 id=3DWSLREG>WSLREG</H3><PRE>Address  : #013B
Function : Writes value to the primary slot register
Input    : A  - value value to (see RSLREG)
</PRE>
<H3 id=3DRDVDP>RDVDP</H3><PRE>Address  : #013E
Function : Reads VDP status register
Output   : A  - Value which was read
Registers: A
</PRE>
<H3 id=3DSNSMAT>SNSMAT</H3><PRE>Address  : #0141
Function : Returns the value of the specified line from the keyboard =
matrix
Input    : A  - for the specified line
Output   : A  - for data (the bit corresponding to the pressed key will =
be 0)
Registers: AF
</PRE>
<H3 id=3DPHYDIO>PHYDIO</H3><PRE>Address  : #0144
Function : Executes I/O for mass-storage media like diskettes
Input    : B  - Number of sectors
           C  - Media ID of the disk
           DE - Begin sector
           HL - Begin address in memory
Registers: All
Remark   : Before the call is called, the Z-flag must be reset, and the =
execution
           address which was in HL must be at the last stack address
           By the way: In minimum configuration only a HOOK is available
</PRE>
<H3 id=3DFORMAT>FORMAT</H3><PRE>Address  : #0147
Function : Initialises mass-storage media like formatting of diskettes
Registers: All
Remark   : In minimum configuration only a HOOK is available
</PRE>
<H3 id=3DISFLIO>ISFLIO</H3><PRE>Address  : #014A
Function : Tests if I/O to device is taking place
Output   : A  - #00 if not taking place
            not #00 if taking place
Registers: AF
</PRE>
<H3 id=3DOUTDLP>OUTDLP</H3><PRE>Address  : #014D
Function : Printer output
Input    : A  - code to print
Registers: F
Remark   : Differences with LPTOUT:
           1. TAB is expanded to spaces
           2. For non-MSX printers, Hiragana is transformed to katakana
              and graphic characters are transformed to 1-byte =
characters
           3. If failed, device I/O error occurs
</PRE>
<H3 id=3DGETVCP>GETVCP</H3><PRE>Address  : #0150
Function : Returns pointer to play queue
Input    : A  - Channel number
Output   : HL - Pointer
Registers: AF
Remark   : Only used to play music in background
</PRE>
<H3 id=3DGETVC2>GETVC2</H3><PRE>Address  : #0153
Function : Returns pointer to variable in queue number VOICEN (byte op =
#FB38)
Input    : L  - Pointer in play buffer
Output   : HL - Pointer
Registers: AF
</PRE>
<H3 id=3DKILBUF>KILBUF</H3><PRE>Address  : #0156
Function : Clear keyboard buffer
Registers: HL
</PRE>
<H3 id=3DCALBAS>CALBAS</H3><PRE>Address  : #0159
Function : Executes inter-slot call to the routine in BASIC interpreter
Input    : IX - for the calling address
Output   : Depends on the called routine
Registers: Depends on the called routine
</PRE>
<H1 id=3Dmsx2bios>MSX 2 BIOS Entries</H1>
<H3 id=3DSUBROM>SUBROM</H3><PRE>Address  : #015C
Function : Calls a routine in SUB-ROM
Input    : IX - Address of routine in SUB-ROM
Output   : Depends on the routine
Registers: Alternative registers, IY
Remark   : Use of EXTROM or CALSLT is more convenient.
           In IX a extra value to the routine can be given by first
           PUSH'ing it to the stack.
</PRE>
<H3 id=3DEXTROM>EXTROM</H3><PRE>Address  : #015F
Function : Calls a routine in SUB-ROM. Most common way
Input    : IX - Address of routine in SUB-ROM
Output   : Depends on the routine
Registers: Alternative registers, IY
Remark   : Use: LD IX,address
                CALL EXTROM
</PRE>
<H3 id=3DCHKSLZ>CHKSLZ</H3><PRE>Address  : #0162
Function : Search slots for SUB-ROM
Registers: Alles
</PRE>
<H3 id=3DCHKNEW>CHKNEW</H3><PRE>Address  : #0165
Function : Tests screen mode
Output   : C-flag set if screenmode =3D 5, 6, 7 or 8=20
Registers: AF
</PRE>
<H3 id=3DEOL>EOL</H3><PRE>Address  : #0168
Function : Deletes to the end of the line
Input    : H  - x-coordinate of cursor
           L  - y-coordinate of cursor
Registers: All
</PRE>
<H3 id=3DBIGFIL>BIGFIL</H3><PRE>Address  : #016B
Function : Same function as FILVRM (total VRAM can be reached).
Input    : HL - address
           BC - length
           A  - data
Registers: AF,BC
</PRE>
<H3 id=3DNSETRD>NSETRD</H3><PRE>Address  : #016E
Function : Same function as SETRD.(with full 16 bits VRAM-address)
Input    : HL - VRAM address
Registers: AF
</PRE>
<H3 id=3DNSTWRT>NSTWRT</H3><PRE>Address  : #0171
Function : Same function as SETWRT.(with full 16 bits VRAM-address)
Input    : HL - VRAM address
Registers: AF
</PRE>
<H3 id=3DNRDVRM>NRDVRM</H3><PRE>Address  : #0174
Function : Reads VRAM like in RDVRM.(with full 16 bits VRAM-address)
Input    : HL - VRAM address
Output   : A  - Read value
Registers: F
</PRE>
<H3 id=3DNWRVRM>NWRVRM</H3><PRE>Address  : #0177
Function : Writes to VRAM like in WRTVRM.(with full 16 bits =
VRAM-address)
Input    : HL - VRAM address
           A  - Value to write
Registers: AF
</PRE>
<H1 id=3Dmsx2pbios>MSX 2+ BIOS Entries</H1>
<H3 id=3DRDBTST>RDBTST</H3><PRE>Address  : #017A
Function : Read value of I/O poort #F4
Input    : none
Output   : A =3D value read
Registers: AF
</PRE>
<H3 id=3DWRBTST>WRBTST</H3><PRE>Address  : #017D
Function : Write value to I/O poort #F4
Input    : A =3D value to write
           Bit 7 shows the MSX 2+ startup screen when reset, otherwise =
it's skipped.
Output   : none
Registers: none
</PRE>
<H1 id=3Dmsxtrbios>MSX turbo R BIOS Entries</H1>
<H3 id=3DCHGCPU>CHGCPU</H3><PRE>Address  : #0180
Function : Changes CPU mode
Input    : A =3D LED 0 0 0 0 0 x x
                |            0 0 =3D Z80 (ROM) mode
                |            0 1 =3D R800 ROM  mode
                |            1 0 =3D R800 DRAM mode
               LED indicates whether the Turbo LED is switched with the =
CPU
Output   : none
Registers: none
</PRE>
<H3 id=3DGETCPU>GETCPU</H3><PRE>Address  : #0183
Function : Returns current CPU mode
Input    : none
Output   : A =3D 0 0 0 0 0 0 x x
                           0 0 =3D Z80 (ROM) mode
                           0 1 =3D R800 ROM  mode
                           1 0 =3D R800 DRAM mode
Registers: AF
</PRE>
<H3 id=3DPCMPLY>PCMPLY</H3><PRE>Address  : #0186
Function : Plays specified memory area through the PCM chip
Input    : A =3D v 0 0 0 0 0 x x
               |           | |
               |           +-+-- Quality parameter (Speed: 0 =3D Fast)
               +---------------- VRAM usage flag
           HL=3D Start address in RAM or VRAM
           BC=3D Length of area to play
           D =3D Bit 0 =3D Bit 17 of area length when using VRAM
           E =3D Bit 0 =3D Bit 17 os start address when using VRAM
Output   : C-flag set when aborted with CTRL-STOP
Registers: all
</PRE>
<H3 id=3DPCMREC>PCMREC</H3><PRE>Address  : #0189
Function : Records audio using the PCM chip into the specified memory =
area
Input    : A =3D v t t t t c x x
               | | | | | | | |
               | | | | | | +-+-- Quality parameter (Speed: 0 =3D Fast)
               | | | | | +------ Zero-data compression
               | +-+-+-+-------- Treshold
               +---------------- VRAM usage flag
           HL=3D Start address in RAM or VRAM
           BC=3D Length of area to play
           D =3D Bit 0 =3D Bit 17 of area length when using VRAM
           E =3D Bit 0 =3D Bit 17 os start address when using VRAM
Output   : C-flag set when aborted with CTRL-STOP
Registers: all
</PRE>
<P class=3Dsigned>BiFi</P></DIV>
<DIV id=3Dfoot>=C2=A9 2014 MSX Assembly Page</DIV></BODY></HTML>

------=_NextPart_000_0000_01CF98A2.D02C1EB0
Content-Type: text/css;
	charset="koi8-r"
Content-Transfer-Encoding: quoted-printable
Content-Location: http://map.grauw.nl/css/map.css

.inv {
	TEXT-DECORATION: overline
}
.map {
	LIST-STYLE-IMAGE: url(mapbullet.gif)
}
.func {
	FONT-WEIGHT: bold
}
.box {
	BORDER-BOTTOM: black thin solid; BORDER-LEFT: black thin solid; =
PADDING-BOTTOM: 0px; PADDING-LEFT: 0.2em; PADDING-RIGHT: 0.2em; =
BORDER-TOP: black thin solid; BORDER-RIGHT: black thin solid; =
PADDING-TOP: 0px
}
.signed {
	MARGIN-TOP: 3em
}
.toc {
	BORDER-BOTTOM: 0px; BORDER-LEFT: 0px; PADDING-BOTTOM: 0px; =
PADDING-LEFT: 0px; WIDTH: 100%; PADDING-RIGHT: 0px; BORDER-TOP: 0px; =
BORDER-RIGHT: 0px; PADDING-TOP: 0px
}
.page {
	BORDER-BOTTOM: gray thin solid; TEXT-ALIGN: center; FONT-STYLE: italic; =
MARGIN: 2em; COLOR: #888
}
.floatleft {
	MARGIN: 0px 0.5em 0.5em; FLOAT: left
}
.floatright {
	MARGIN: 0px 0.5em 0.5em; FLOAT: right
}
.index DT {
	MARGIN-TOP: 1em; DISPLAY: block; FONT-SIZE: larger
}
.index DD {
	DISPLAY: block; MARGIN-LEFT: 2em
}
.indexpage {
	FLOAT: right
}
.matrix {
	BORDER-COLLAPSE: collapse; EMPTY-CELLS: show
}
.matrix TH {
	BORDER-BOTTOM: gray 1px solid; TEXT-ALIGN: center; BORDER-LEFT: gray =
1px solid; BORDER-TOP: gray 1px solid; BORDER-RIGHT: gray 1px solid
}
.matrix TD {
	BORDER-BOTTOM: gray 1px solid; TEXT-ALIGN: center; BORDER-LEFT: gray =
1px solid; BORDER-TOP: gray 1px solid; BORDER-RIGHT: gray 1px solid
}
.spacycells TD {
	PADDING-BOTTOM: 1em; PADDING-LEFT: 3em; PADDING-RIGHT: 3em; =
PADDING-TOP: 1em
}
A[hreflang]:after {
	CONTENT: " =8B" attr(hreflang) "=9B"
}
A[href$=3D'.pdf']:after {
	CONTENT: " =8Bpdf=9B"
}
A[href$=3D'.txt']:after {
	CONTENT: " =8Btxt=9B"
}
A[href$=3D'.TXT']:after {
	CONTENT: " =8Btxt=9B"
}
A[href$=3D'.lzh']:after {
	CONTENT: " =8Blzh=9B"
}
A[href$=3D'.zip']:after {
	CONTENT: " =8Bzip=9B"
}
A[hreflang][href$=3D'.pdf']:after {
	CONTENT: " =8B" attr(hreflang) "=9B =8Bpdf=9B"
}
A[hreflang][href$=3D'.txt']:after {
	CONTENT: " =8B" attr(hreflang) "=9B =8Btxt=9B"
}
A[hreflang][href$=3D'.TXT']:after {
	CONTENT: " =8B" attr(hreflang) "=9B =8Btxt=9B"
}
A[hreflang][href$=3D'.lzh']:after {
	CONTENT: " =8B" attr(hreflang) "=9B =8Blzh=9B"
}
A[hreflang][href$=3D'.zip']:after {
	CONTENT: " =8B" attr(hreflang) "=9B =8Bzip=9B"
}

------=_NextPart_000_0000_01CF98A2.D02C1EB0
Content-Type: text/css;
	charset="koi8-r"
Content-Transfer-Encoding: 7bit
Content-Location: http://map.grauw.nl/css/print.css

#menu {
	DISPLAY: none !important
}
.toc A:link {
	COLOR: black; underline: none
}
.toc A:active {
	COLOR: black; underline: none
}
.toc A:visited {
	COLOR: black; underline: none
}
.toc A:hover {
	COLOR: black; underline: none
}

------=_NextPart_000_0000_01CF98A2.D02C1EB0
Content-Type: text/css;
	charset="koi8-r"
Content-Transfer-Encoding: quoted-printable
Content-Location: http://map.grauw.nl/css/classic.css

BODY {
	BORDER-BOTTOM: 0px; BORDER-LEFT: 0px; PADDING-BOTTOM: 0px; =
BACKGROUND-COLOR: white; MARGIN: 0px; PADDING-LEFT: 0px; PADDING-RIGHT: =
0px; FONT-FAMILY: Verdana, Arial, "Arial Unicode MS", sans-serif, =
"Lucida Sans Unicode"; COLOR: black; FONT-SIZE: 15px; BORDER-TOP: 0px; =
BORDER-RIGHT: 0px; PADDING-TOP: 0px
}
#head {
	BORDER-BOTTOM: black thin solid; TEXT-ALIGN: center; PADDING-BOTTOM: =
0.5em; MARGIN: 0px; PADDING-LEFT: 0.5em; WIDTH: auto; PADDING-RIGHT: =
0.5em; BACKGROUND: #ccf; COLOR: black; FONT-SIZE: 20px; BORDER-TOP: =
black thin solid; FONT-WEIGHT: bold; PADDING-TOP: 0.5em
}
#menu UL {
	BORDER-BOTTOM: 0px; TEXT-ALIGN: center; BORDER-LEFT: 0px; =
PADDING-BOTTOM: 0px; MARGIN: auto 0px; PADDING-LEFT: 0px; PADDING-RIGHT: =
0px; DISPLAY: block; COLOR: black; FONT-SIZE: 16px; BORDER-TOP: 0px; =
FONT-WEIGHT: 600; BORDER-RIGHT: 0px; PADDING-TOP: 0px; =
linefeed-treatment: ignore; white-space-treatment: ignore
}
#menu UL LI {
	BORDER-BOTTOM: 0px; BORDER-LEFT: 0px; PADDING-BOTTOM: 0px; =
LIST-STYLE-TYPE: none; MARGIN: 0px; PADDING-LEFT: 0px; PADDING-RIGHT: =
0px; DISPLAY: inline; WHITE-SPACE: nowrap; BORDER-TOP: 0px; =
BORDER-RIGHT: 0px; PADDING-TOP: 0px
}
#menu A {
	PADDING-BOTTOM: 0em; PADDING-LEFT: 1em; WIDTH: 15%; PADDING-RIGHT: 1em; =
COLOR: #44f; TEXT-DECORATION: none; PADDING-TOP: 0em
}
#menu A:hover {
	BACKGROUND: #ccf; COLOR: #22f
}
#menu UL UL {
	DISPLAY: none
}
#content {
	PADDING-BOTTOM: 0.75em; PADDING-LEFT: 0.75em; PADDING-RIGHT: 0.75em; =
PADDING-TOP: 0.75em
}
#content A {
	COLOR: #d50; TEXT-DECORATION: none
}
#content A:hover {
	COLOR: #f70; TEXT-DECORATION: underline
}
#foot {
	TEXT-ALIGN: center; PADDING-BOTTOM: 0em; FONT-STYLE: italic; =
MARGIN-TOP: 2em; PADDING-LEFT: 0em; WIDTH: auto; PADDING-RIGHT: 0em; =
BACKGROUND: #ddf; COLOR: #666; CLEAR: both; PADDING-TOP: 0em
}
#foot A {
	COLOR: #444; TEXT-DECORATION: none
}
#foot A:hover {
	COLOR: #d50
}
.updates {
	BORDER-BOTTOM: #ddf 3px solid; BORDER-LEFT: #ddf 3px solid; MARGIN-TOP: =
1em; WIDTH: 35%; MARGIN-BOTTOM: 0.4em; FLOAT: right; MARGIN-LEFT: 0.4em; =
BORDER-TOP: #ddf 3px solid; BORDER-RIGHT: #ddf 3px solid
}
.updates P {
	MARGIN: 0.5em
}
.updates H2 {
	TEXT-ALIGN: center; PADDING-BOTTOM: 0.25em; MARGIN-TOP: 0em; =
PADDING-LEFT: 0em; WIDTH: 100%; PADDING-RIGHT: 0em; MARGIN-BOTTOM: =
0.5em; BACKGROUND: #bbf; COLOR: white; FONT-SIZE: 18px; FONT-WEIGHT: =
bold; PADDING-TOP: 0.25em
}
H1 {
	MARGIN-TOP: 1.2em
}
H2 {
	MARGIN-TOP: 1.2em
}
H3 {
	MARGIN-TOP: 1.2em
}
H1 {
	MARGIN-TOP: 0.8em
}
H1 + H2 {
	MARGIN-TOP: 0.8em
}
H2 + H3 {
	MARGIN-TOP: 0.8em
}
H1 {
	TEXT-ALIGN: center; PADDING-BOTTOM: 0.25em; PADDING-LEFT: 0em; WIDTH: =
100%; PADDING-RIGHT: 0em; BACKGROUND: #bbf; COLOR: white; FONT-SIZE: =
20px; FONT-WEIGHT: bold; PADDING-TOP: 0.25em
}
H2 {
	FONT-SIZE: 22px
}
H3 {
	FONT-SIZE: 18px
}
P {
	MARGIN: 1em 0px
}
EM {
	FONT-STYLE: italic; COLOR: #44c
}
IMG {
	MAX-WIDTH: 100%
}
IMG.illustration {
	MARGIN: 0px 0px 0.7em 0.7em; FLOAT: right
}
DT {
	FONT-WEIGHT: bold
}
TABLE {
	BORDER-BOTTOM: #eef 4px solid; BORDER-LEFT: #eef 4px solid; MARGIN: 1em =
0px; BORDER-SPACING: 0; BORDER-COLLAPSE: collapse; EMPTY-CELLS: show; =
BORDER-TOP: #eef 4px solid; BORDER-RIGHT: #eef 4px solid
}
TD {
	BORDER-BOTTOM: #eef 2px solid; BORDER-LEFT: #eef 2px solid; =
PADDING-BOTTOM: 0em; PADDING-LEFT: 0.5em; PADDING-RIGHT: 0.5em; =
BORDER-TOP: #eef 2px solid; BORDER-RIGHT: #eef 2px solid; PADDING-TOP: =
0em
}
TH {
	BORDER-BOTTOM: #eef 2px solid; BORDER-LEFT: #eef 2px solid; =
PADDING-BOTTOM: 0em; PADDING-LEFT: 0.5em; PADDING-RIGHT: 0.5em; =
BORDER-TOP: #eef 2px solid; BORDER-RIGHT: #eef 2px solid; PADDING-TOP: =
0em
}
TH {
	BACKGROUND: #ddf
}
BLOCKQUOTE {
	BORDER-LEFT: #ddf 1em solid; PADDING-LEFT: 2em; MARGIN-LEFT: 0px
}
BLOCKQUOTE[cite] {
	POSITION: relative; -moz-binding: url(map-xbl.xml#blockquote-cite)
}
BLOCKQUOTE[cite] > A.citelink {
	BORDER-BOTTOM: #ccc 1px solid; POSITION: absolute; BORDER-LEFT: #ccc =
1px solid; PADDING-BOTTOM: 0.2em; PADDING-LEFT: 0.5em; BOTTOM: 0px; =
PADDING-RIGHT: 0.5em; DISPLAY: none; BACKGROUND: white; BORDER-TOP: #ccc =
1px solid; RIGHT: 0px; BORDER-RIGHT: #ccc 1px solid; PADDING-TOP: 0.2em
}
BLOCKQUOTE[cite] > A.citelink:hover {
	BACKGROUND: #eee
}
BLOCKQUOTE[cite]:hover > A.citelink {
	DISPLAY: block
}

------=_NextPart_000_0000_01CF98A2.D02C1EB0
Content-Type: text/css;
	charset="koi8-r"
Content-Transfer-Encoding: quoted-printable
Content-Location: http://map.grauw.nl/css/modern.css

BODY {
	BORDER-BOTTOM: 0em; TEXT-ALIGN: right; BORDER-LEFT: 0em; =
PADDING-BOTTOM: 0em; BACKGROUND-COLOR: green; MARGIN: 0em; PADDING-LEFT: =
0em; PADDING-RIGHT: 0em; FONT: small Verdana, sans-serif; COLOR: white; =
BORDER-TOP: 0em; BORDER-RIGHT: 0em; PADDING-TOP: 0em
}
#head {
	BORDER-BOTTOM: red thick dashed; TEXT-ALIGN: center; PADDING-BOTTOM: =
0.5em; MARGIN: 0px; PADDING-LEFT: 0.5em; WIDTH: auto; PADDING-RIGHT: =
0.5em; BACKGROUND: blue; COLOR: white; FONT-SIZE: large; BORDER-TOP: red =
dotted; FONT-WEIGHT: bold; PADDING-TOP: 0.5em
}
#menu UL {
	BORDER-BOTTOM: 0px; TEXT-ALIGN: center; BORDER-LEFT: 0px; =
PADDING-BOTTOM: 0px; MARGIN: auto 0px; PADDING-LEFT: 0px; PADDING-RIGHT: =
0px; DISPLAY: block; COLOR: black; FONT-SIZE: larger; BORDER-TOP: 0px; =
FONT-WEIGHT: 100; BORDER-RIGHT: 0px; PADDING-TOP: 0px; =
linefeed-treatment: ignore; white-space-treatment: ignore
}
#menu UL UL {
	DISPLAY: none
}
#menu UL LI {
	BORDER-BOTTOM: 0px; BORDER-LEFT: 0px; PADDING-BOTTOM: 0px; =
LIST-STYLE-TYPE: none; MARGIN: 0px; PADDING-LEFT: 0px; PADDING-RIGHT: =
0px; DISPLAY: inline; WHITE-SPACE: normal; BORDER-TOP: 0px; =
BORDER-RIGHT: 0px; PADDING-TOP: 0px
}
#menu A {
	PADDING-BOTTOM: 0em; PADDING-LEFT: 1em; WIDTH: 15%; PADDING-RIGHT: 1em; =
COLOR: yellow; TEXT-DECORATION: none; PADDING-TOP: 0em
}
#menu A:hover {
	BACKGROUND: white; COLOR: #f70
}
#content {
	PADDING-BOTTOM: 0.75em; PADDING-LEFT: 0.75em; PADDING-RIGHT: 0.75em; =
PADDING-TOP: 0.75em
}
#content A {
	FONT-STYLE: italic; COLOR: #ccf; TEXT-DECORATION: none
}
#content A:hover {
	COLOR: #eef; TEXT-DECORATION: underline overline
}
#foot {
	TEXT-ALIGN: center; PADDING-BOTTOM: 0em; FONT-STYLE: italic; =
MARGIN-TOP: 2em; PADDING-LEFT: 0em; WIDTH: auto; PADDING-RIGHT: 0em; =
BACKGROUND: #ddf; COLOR: #666; CLEAR: both; PADDING-TOP: 0em
}
#foot A {
	COLOR: #444; TEXT-DECORATION: none
}
#foot A:hover {
	COLOR: #d50
}
PRE {
	FONT-SIZE: 100%
}
CODE {
	FONT-SIZE: 100%
}
H1 {
	BORDER-BOTTOM: black solid; TEXT-ALIGN: center; PADDING-BOTTOM: 0.1em; =
PADDING-LEFT: 0em; WIDTH: 50%; PADDING-RIGHT: 0em; FONT: italic x-large =
serif; COLOR: white; MARGIN-LEFT: 25%; BORDER-TOP: black solid; =
MARGIN-RIGHT: 25%; PADDING-TOP: 0.1em
}
H2 {
	FONT: x-large serif; COLOR: #f70
}
H3 {
	FONT: 300 large serif; COLOR: yellow
}
EM {
	FONT-STYLE: italic; COLOR: #f88
}
DT {
	FONT-WEIGHT: bold
}
TABLE {
	BORDER-BOTTOM: #eef 4px solid; BORDER-LEFT: #eef 4px solid; =
BORDER-SPACING: 0; BORDER-COLLAPSE: collapse; EMPTY-CELLS: show; =
BORDER-TOP: #eef 4px solid; BORDER-RIGHT: #eef 4px solid
}
TD {
	BORDER-BOTTOM: #eef 2px solid; BORDER-LEFT: #eef 2px solid; =
PADDING-BOTTOM: 0em; PADDING-LEFT: 0.5em; PADDING-RIGHT: 0.5em; =
BORDER-TOP: #eef 2px solid; BORDER-RIGHT: #eef 2px solid; PADDING-TOP: =
0em
}
TH {
	BORDER-BOTTOM: #eef 2px solid; BORDER-LEFT: #eef 2px solid; =
PADDING-BOTTOM: 0em; PADDING-LEFT: 0.5em; PADDING-RIGHT: 0.5em; =
BORDER-TOP: #eef 2px solid; BORDER-RIGHT: #eef 2px solid; PADDING-TOP: =
0em
}
TH {
	BACKGROUND: #ddf; COLOR: black
}
.updates {
	BORDER-BOTTOM: #ddf 3px solid; BORDER-LEFT: #ddf 3px solid; WIDTH: 35%; =
MARGIN-BOTTOM: 0.4em; FLOAT: right; MARGIN-LEFT: 0.4em; BORDER-TOP: #ddf =
3px solid; BORDER-RIGHT: #ddf 3px solid
}
.updates P {
	MARGIN: 0.5em
}
.updates H2 {
	BORDER-BOTTOM: black solid; TEXT-ALIGN: center; PADDING-BOTTOM: 0.1em; =
MARGIN: 0em 25% 0.5em; PADDING-LEFT: 0em; WIDTH: 50%; PADDING-RIGHT: =
0em; FONT: italic x-large serif; COLOR: white; BORDER-TOP: black solid; =
PADDING-TOP: 0.1em
}

------=_NextPart_000_0000_01CF98A2.D02C1EB0
Content-Type: text/css;
	charset="koi8-r"
Content-Transfer-Encoding: quoted-printable
Content-Location: http://map.grauw.nl/resources/classic.css

BODY {
	BORDER-BOTTOM: 0px; BORDER-LEFT: 0px; PADDING-BOTTOM: 0px; =
BACKGROUND-COLOR: white; MARGIN: 0px; PADDING-LEFT: 0px; PADDING-RIGHT: =
0px; FONT-FAMILY: Verdana, Arial, "Arial Unicode MS", sans-serif, =
"Lucida Sans Unicode"; COLOR: black; FONT-SIZE: 15px; BORDER-TOP: 0px; =
BORDER-RIGHT: 0px; PADDING-TOP: 0px
}
#head {
	BORDER-BOTTOM: black thin solid; TEXT-ALIGN: center; PADDING-BOTTOM: =
0.5em; MARGIN: 0px; PADDING-LEFT: 0.5em; WIDTH: auto; PADDING-RIGHT: =
0.5em; BACKGROUND: #ccf; COLOR: black; FONT-SIZE: 20px; BORDER-TOP: =
black thin solid; FONT-WEIGHT: bold; PADDING-TOP: 0.5em
}
#menu UL {
	BORDER-BOTTOM: 0px; TEXT-ALIGN: center; BORDER-LEFT: 0px; =
PADDING-BOTTOM: 0px; MARGIN: auto 0px; PADDING-LEFT: 0px; PADDING-RIGHT: =
0px; DISPLAY: block; COLOR: black; FONT-SIZE: 16px; BORDER-TOP: 0px; =
FONT-WEIGHT: 600; BORDER-RIGHT: 0px; PADDING-TOP: 0px; =
linefeed-treatment: ignore; white-space-treatment: ignore
}
#menu UL LI {
	BORDER-BOTTOM: 0px; BORDER-LEFT: 0px; PADDING-BOTTOM: 0px; =
LIST-STYLE-TYPE: none; MARGIN: 0px; PADDING-LEFT: 0px; PADDING-RIGHT: =
0px; DISPLAY: inline; WHITE-SPACE: nowrap; BORDER-TOP: 0px; =
BORDER-RIGHT: 0px; PADDING-TOP: 0px
}
#menu A {
	PADDING-BOTTOM: 0em; PADDING-LEFT: 1em; WIDTH: 15%; PADDING-RIGHT: 1em; =
COLOR: #44f; TEXT-DECORATION: none; PADDING-TOP: 0em
}
#menu A:hover {
	BACKGROUND: #ccf; COLOR: #22f
}
#menu UL UL {
	DISPLAY: none
}
#content {
	PADDING-BOTTOM: 0.75em; PADDING-LEFT: 0.75em; PADDING-RIGHT: 0.75em; =
PADDING-TOP: 0.75em
}
#content A {
	COLOR: #d50; TEXT-DECORATION: none
}
#content A:hover {
	COLOR: #f70; TEXT-DECORATION: underline
}
#foot {
	TEXT-ALIGN: center; PADDING-BOTTOM: 0em; FONT-STYLE: italic; =
MARGIN-TOP: 2em; PADDING-LEFT: 0em; WIDTH: auto; PADDING-RIGHT: 0em; =
BACKGROUND: #ddf; COLOR: #666; CLEAR: both; PADDING-TOP: 0em
}
#foot A {
	COLOR: #444; TEXT-DECORATION: none
}
#foot A:hover {
	COLOR: #d50
}
.updates {
	BORDER-BOTTOM: #ddf 3px solid; BORDER-LEFT: #ddf 3px solid; MARGIN-TOP: =
1em; WIDTH: 35%; MARGIN-BOTTOM: 0.4em; FLOAT: right; MARGIN-LEFT: 0.4em; =
BORDER-TOP: #ddf 3px solid; BORDER-RIGHT: #ddf 3px solid
}
.updates P {
	MARGIN: 0.5em
}
.updates H2 {
	TEXT-ALIGN: center; PADDING-BOTTOM: 0.25em; MARGIN-TOP: 0em; =
PADDING-LEFT: 0em; WIDTH: 100%; PADDING-RIGHT: 0em; MARGIN-BOTTOM: =
0.5em; BACKGROUND: #bbf; COLOR: white; FONT-SIZE: 18px; FONT-WEIGHT: =
bold; PADDING-TOP: 0.25em
}
H1 {
	MARGIN-TOP: 1.2em
}
H2 {
	MARGIN-TOP: 1.2em
}
H3 {
	MARGIN-TOP: 1.2em
}
H1 {
	MARGIN-TOP: 0.8em
}
H1 + H2 {
	MARGIN-TOP: 0.8em
}
H2 + H3 {
	MARGIN-TOP: 0.8em
}
H1 {
	TEXT-ALIGN: center; PADDING-BOTTOM: 0.25em; PADDING-LEFT: 0em; WIDTH: =
100%; PADDING-RIGHT: 0em; BACKGROUND: #bbf; COLOR: white; FONT-SIZE: =
20px; FONT-WEIGHT: bold; PADDING-TOP: 0.25em
}
H2 {
	FONT-SIZE: 22px
}
H3 {
	FONT-SIZE: 18px
}
P {
	MARGIN: 1em 0px
}
EM {
	FONT-STYLE: italic; COLOR: #44c
}
IMG {
	MAX-WIDTH: 100%
}
IMG.illustration {
	MARGIN: 0px 0px 0.7em 0.7em; FLOAT: right
}
DT {
	FONT-WEIGHT: bold
}
TABLE {
	BORDER-BOTTOM: #eef 4px solid; BORDER-LEFT: #eef 4px solid; MARGIN: 1em =
0px; BORDER-SPACING: 0; BORDER-COLLAPSE: collapse; EMPTY-CELLS: show; =
BORDER-TOP: #eef 4px solid; BORDER-RIGHT: #eef 4px solid
}
TD {
	BORDER-BOTTOM: #eef 2px solid; BORDER-LEFT: #eef 2px solid; =
PADDING-BOTTOM: 0em; PADDING-LEFT: 0.5em; PADDING-RIGHT: 0.5em; =
BORDER-TOP: #eef 2px solid; BORDER-RIGHT: #eef 2px solid; PADDING-TOP: =
0em
}
TH {
	BORDER-BOTTOM: #eef 2px solid; BORDER-LEFT: #eef 2px solid; =
PADDING-BOTTOM: 0em; PADDING-LEFT: 0.5em; PADDING-RIGHT: 0.5em; =
BORDER-TOP: #eef 2px solid; BORDER-RIGHT: #eef 2px solid; PADDING-TOP: =
0em
}
TH {
	BACKGROUND: #ddf
}
BLOCKQUOTE {
	BORDER-LEFT: #ddf 1em solid; PADDING-LEFT: 2em; MARGIN-LEFT: 0px
}
BLOCKQUOTE[cite] {
	POSITION: relative; -moz-binding: url(map-xbl.xml#blockquote-cite)
}
BLOCKQUOTE[cite] > A.citelink {
	BORDER-BOTTOM: #ccc 1px solid; POSITION: absolute; BORDER-LEFT: #ccc =
1px solid; PADDING-BOTTOM: 0.2em; PADDING-LEFT: 0.5em; BOTTOM: 0px; =
PADDING-RIGHT: 0.5em; DISPLAY: none; BACKGROUND: white; BORDER-TOP: #ccc =
1px solid; RIGHT: 0px; BORDER-RIGHT: #ccc 1px solid; PADDING-TOP: 0.2em
}
BLOCKQUOTE[cite] > A.citelink:hover {
	BACKGROUND: #eee
}
BLOCKQUOTE[cite]:hover > A.citelink {
	DISPLAY: block
}

------=_NextPart_000_0000_01CF98A2.D02C1EB0
Content-Type: text/css;
	charset="koi8-r"
Content-Transfer-Encoding: quoted-printable
Content-Location: http://map.grauw.nl/css/experimental.css

@import url( classic.css );
HTML {
	PADDING-BOTTOM: 0px; MARGIN: 0px; PADDING-LEFT: 0px; PADDING-RIGHT: =
0px; PADDING-TOP: 0px
}
BODY {
	PADDING-BOTTOM: 0px; MARGIN: 0px; PADDING-LEFT: 0px; PADDING-RIGHT: =
0px; PADDING-TOP: 0px
}
HTML {
	HEIGHT: 100%
}
BODY {
	POSITION: relative; MIN-HEIGHT: 100%
}
* HTML BODY {
	HEIGHT: 100%
}
#menu UL {
	BORDER-BOTTOM: 0px; TEXT-ALIGN: center; BORDER-LEFT: 0px; =
PADDING-BOTTOM: 0px; MARGIN: auto 0px; PADDING-LEFT: 0px; PADDING-RIGHT: =
0px; DISPLAY: block; COLOR: black; FONT-SIZE: larger; BORDER-TOP: 0px; =
FONT-WEIGHT: 600; BORDER-RIGHT: 0px; PADDING-TOP: 0px; =
linefeed-treatment: ignore; white-space-treatment: ignore
}
#menu UL LI {
	POSITION: relative
}
#menu A:hover {
	BACKGROUND: #ccf; COLOR: #22f; -moz-border-radius: 4px; border-radius: =
4px
}
#menu LI:hover {
	BACKGROUND: #ccf; COLOR: #22f; -moz-border-radius: 4px; border-radius: =
4px
}
#menu UL UL {
	POSITION: absolute; DISPLAY: none; TOP: 1em
}
#menu LI:hover > UL {
	WIDTH: auto; DISPLAY: block; BACKGROUND: black; COLOR: #eef; LEFT: 0px; =
-moz-border-radius: 4px; border-radius: 4px; -moz-opacity: 0.75; =
opacity: 0.75
}
#menu UL UL LI {
	PADDING-BOTTOM: 2px; PADDING-LEFT: 0px; PADDING-RIGHT: 0px; DISPLAY: =
block; FONT-SIZE: small; FONT-WEIGHT: normal; PADDING-TOP: 2px
}
#menu UL UL LI A {
	DISPLAY: block; COLOR: #ddf
}
#menu UL UL LI A:hover {
	BACKGROUND: #444; COLOR: #ddf
}
#menu LI LI:hover {
	BACKGROUND: #444; COLOR: #ddf
}
#foot {
	POSITION: absolute; WIDTH: 100%; BOTTOM: 0px
}
#content {
	PADDING-BOTTOM: 2em
}
.updates {
	-moz-border-radius: 8px; border-radius: 8px
}
.updates H2 {
	-moz-border-radius: 4px; border-radius: 4px; =
-moz-border-bottom-right-radius: 0; -moz-border-bottom-left-radius: 0; =
border-bottom-right-radius: 0; border-bottom-left-radius: 0
}
TR:hover {
	BACKGROUND: #eef
}
.matrix TR:first-child TH:first-child {
	BACKGROUND: gray; COLOR: white
}

------=_NextPart_000_0000_01CF98A2.D02C1EB0--

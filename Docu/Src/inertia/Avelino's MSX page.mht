From: <Сохранено Windows Internet Explorer 8>
Subject: Avelino's MSX page
Date: Fri, 4 Jul 2014 23:55:32 +0300
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----=_NextPart_000_0007_01CF97E3.70DEE560"
X-MimeOLE: Produced By Microsoft MimeOLE V6.00.3790.4862

This is a multi-part message in MIME format.

------=_NextPart_000_0007_01CF97E3.70DEE560
Content-Type: text/html;
	charset="windows-1251"
Content-Transfer-Encoding: quoted-printable
Content-Location: http://msx.atlantes.org/index_en.html

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML><HEAD><TITLE>Avelino's MSX page</TITLE>
<META content=3D"text/html; charset=3Dwindows-1251" =
http-equiv=3DContent-Type><LINK=20
rel=3Dstylesheet type=3Dtext/css =
href=3D"http://msx.atlantes.org/style.css">
<META name=3DGENERATOR content=3D"MSHTML 8.00.6001.23216"></HEAD>
<BODY>
<CENTER>
<H1>MSX Page</H1>
<H4><A href=3D"mailto:avelinoherrera@gmail.com">Avelino Herrera=20
Morales</A></H4><BR>
<H5><A =
href=3D"http://msx.atlantes.org/index_es.html">Espa&#241;ol</A></H5>
<P><A =
href=3D"http://avelino.atlantes.org/blog">blog</A></P></CENTER><BR><BR><!=
--=0A=
	<p align=3D"right">Hosted by <a =
href=3D"http://www.gabiot.com">gabiot.com</a></p>=0A=
	<a href=3D"http://www.gabiot.com"><img src=3D"logo_gabiot.png" =
width=3D"90" align=3D"right"></img></a>=0A=
	--><BR>
<HR>

<P>By this page i want to offer my MSX projects to the community. Sorry =
about my=20
poor english writting. I am spanish :-)</P>
<UL>
  <LI><A href=3D"http://msx.atlantes.org/index_en.html#sdccmsxdos">SDCC =
backend=20
  for MSXDOS</A> (updated basic heap usage for=20
  <CODE>crt0msx_msxdos_advanced.s</CODE>)=20
  <LI><A href=3D"http://msx.atlantes.org/index_en.html#sdccmsx">SDCC =
backend for=20
  MSX ROMs</A> (section started with Alberto Orante updates)=20
  <LI><A =
href=3D"http://msx.atlantes.org/index_en.html#moonsound">Moonsound=20
  programming</A>=20
  <LI><A href=3D"http://msx.atlantes.org/index_en.html#huffman">Huffman=20
  compression</A>=20
  <LI><A =
href=3D"http://msx.atlantes.org/index_en.html#graphics">Graphics</A>=20
  <LI><A href=3D"http://msx.atlantes.org/index_en.html#psg">PSG</A>=20
  <LI><A href=3D"http://msx.atlantes.org/index_en.html#fixedpoint">Fixed =
point</A>=20

  <LI><A =
href=3D"http://msx.atlantes.org/index_en.html#doc">Documents</A>=20
</LI></UL><BR>
<HR>
<BR><A name=3Dsdccmsxdos></A>
<CENTER>
<H4>SDCC backend for MSXDOS</H4></CENTER>
<P>The <A href=3D"http://sdcc.sourceforge.net/">SDCC</A> is a =
cross-compiler for=20
small devices that runs in Windows and in Unix/Linux platforms, that =
allows you=20
to generate code for a large variety of 8-bit and 16-bit platforms. =
Among these=20
plataforms we have the Z80 and the Z80 with GameBoy extensions =
(GBZ80).</P>
<P>The Z80 code that SDCC generates by default is not MSX targeted and =
the final=20
output is always an IntelHex file with the code. With this backend =
modification=20
for MSXDOS we will be able to easily convert these IntelHex output files =
into=20
.COM files. The system requirements for cross-compiling are (for both=20
Windows/Unix/Linux platforms):</P>
<UL>
  <LI><A href=3D"http://sdcc.sourceforge.net/">sdcc</A> compiler =
installed.=20
  Version 2.9.0 or later (I recomend to use a recent snapshot).=20
  <LI><A href=3D"http://sourceforge.net/projects/hex2bin">hex2bin</A> =
conversor=20
  installed </LI></UL>
<P>Both packages can be installed from binaries or sources. The basic =
files=20
needed to generate .COM MSXDOS executables are:</P>
<UL>
  <LI><A=20
  =
href=3D"http://msx.atlantes.org/sdcc_msx/crt0msx_msxdos.s">crt0msx_msxdos=
.s</A>=20
  The <I>startup</I> code that linker needs to generate an easily =
convertible=20
  IntelHex output file=20
  <LI><A=20
  =
href=3D"http://msx.atlantes.org/sdcc_msx/crt0msx_msxdos_advanced.s">crt0m=
sx_msxdos_advanced.s</A>=20
  An alternate <I>startup</I> code that allows to use standard main =
arguments to=20
  read command line parameters (<CODE>int main(char **argv, int =
argc)</CODE>).=20
  It adds a few overhead bytes=20
  <LI><A href=3D"http://msx.atlantes.org/sdcc_msx/types.h">types.h</A> =
Standard=20
  types=20
  <LI><A =
href=3D"http://msx.atlantes.org/sdcc_msx/putchar.s">putchar.s</A> MSXDOS =

  compatible <I>putchar</I> function=20
  <LI><A =
href=3D"http://msx.atlantes.org/sdcc_msx/getchar.s">getchar.s</A> MSXDOS =

  compatible <I>getchar</I> function=20
  <LI><A href=3D"http://msx.atlantes.org/sdcc_msx/dos.s">dos.s</A>/<A=20
  href=3D"http://msx.atlantes.org/sdcc_msx/dos.h">dos.h</A> MSXDOS =
functions=20
  <LI><A href=3D"http://msx.atlantes.org/sdcc_msx/dos2.s">dos2.s</A>/<A=20
  href=3D"http://msx.atlantes.org/sdcc_msx/dos2.h">dos2.h</A> MSXDOS2 =
functions=20
  <LI><A =
href=3D"http://msx.atlantes.org/sdcc_msx/interrupt.s">interrupt.s</A>/<A =

  href=3D"http://msx.atlantes.org/sdcc_msx/interrupt.h">interrupt.h</A> =
Interrupt=20
  handling routines=20
  <LI><A =
href=3D"http://msx.atlantes.org/sdcc_msx/ioport.s">ioport.s</A>/<A=20
  href=3D"http://msx.atlantes.org/sdcc_msx/ioport.h">ioport.h</A> Port =
addressing=20
  routines <CODE>in</CODE> and <CODE>out</CODE> to to make easy the =
Hitech C=20
  code compatibility=20
  <LI><A =
href=3D"http://msx.atlantes.org/sdcc_msx/conio.c">conio.c</A>/<A=20
  href=3D"http://msx.atlantes.org/sdcc_msx/conio.h">conio.h</A> Basic =
console I/O=20
  routines=20
  <LI><A href=3D"http://msx.atlantes.org/sdcc_msx/heap.c">heap.c</A>/<A=20
  href=3D"http://msx.atlantes.org/sdcc_msx/heap.h">heap.h</A> Basic heap =
routines=20
  (<I>malloc</I>, <I>free</I>)=20
  <LI><A =
href=3D"http://msx.atlantes.org/sdcc_msx/keyboard.s">keyboard.s</A>/<A=20
  href=3D"http://msx.atlantes.org/sdcc_msx/keyboard.h">keyboard.h</A> =
Keyboard=20
  routines=20
  <LI><A href=3D"http://msx.atlantes.org/sdcc_msx/vdp.s">vdp.s</A>/<A=20
  href=3D"http://msx.atlantes.org/sdcc_msx/vdp.h">vdp.h</A> Some VDP =
routines=20
  <LI><A href=3D"http://msx.atlantes.org/sdcc_msx/mem.c">mem.c</A>/<A=20
  href=3D"http://msx.atlantes.org/sdcc_msx/mem.h">mem.h</A> =
<CODE>memcpy</CODE>=20
  and <CODE>memset</CODE> functions </LI></UL>
<P>First we have to do is to assemble the <CODE>.s</CODE> previous files =
and to=20
compile the <CODE>.c</CODE> previous files using the =
<CODE>sdasz80</CODE>=20
assembler and the <CODE>sdcc</CODE> compiler included in SDCC =
package:</P>
<UL>
  <LI><CODE>$ sdasz80 -o crt0msx_msxdos.s</CODE> "or" <CODE>$ sdasz80 -o =

  crt0msx_msxdos_advanced.s</CODE>=20
  <LI><CODE>$ sdasz80 -o putchar.s</CODE>=20
  <LI><CODE>$ sdasz80 -o getchar.s</CODE>=20
  <LI><CODE>$ sdasz80 -o dos.s</CODE>=20
  <LI><CODE>$ sdasz80 -o dos2.s</CODE>=20
  <LI><CODE>$ sdasz80 -o interrupt.s</CODE>=20
  <LI><CODE>$ sdasz80 -o ioport.s</CODE>=20
  <LI><CODE>$ sdasz80 -o keyboard.s</CODE>=20
  <LI><CODE>$ sdasz80 -o vdp.s</CODE>=20
  <LI><CODE>$ sdcc -mz80 -c -o conio.rel conio.c</CODE>=20
  <LI><CODE>$ sdcc -mz80 -c -o heap.rel heap.c</CODE>=20
  <LI><CODE>$ sdcc -mz80 -c -o mem.rel mem.c</CODE> </LI></UL>
<P>We obtain 11 object files with <CODE>.rel</CODE> extension and same =
name.=20
Let's write a small C sample code for testing <CODE><A=20
href=3D"http://msx.atlantes.org/sdcc_msx/ej.c">ej.c</A></CODE>: =
<PRE>#include "conio.h"
#include "dos.h"

void main(void) {
    puts("Hello, world :-)\r\n");
    exit(0);
}
	</PRE>
<P>That we compile this way:</P><CODE>$ sdcc -mz80 --code-loc XXXX =
--data-loc 0=20
--no-std-crt0 crt0msx_msxdos.rel putchar.rel getchar.rel dos.rel =
conio.rel=20
ej.c</CODE>=20
<P>One notice the <CODE>--no-std-crt0</CODE> parameter, that indicates =
the=20
compiler that should not use the default startup code for Z80, but we =
provide by=20
command line. XXXX indicates code location: for =
<CODE>crt0msx_msxdos.s</CODE>=20
XXXX =3D 0x0107 and for <CODE>crt0msx_msxdos_advanced.s</CODE> XXXX =3D =
0x0178.=20
Global variables will be allocated just after code.</P>
<P>If there are no compile-time errors, among the output files we should =
have=20
the <CODE>ej.ihx</CODE> IntelHex file. Now we process this file with the =

<CODE>hex2bin</CODE> tool to obtain a binary code:</P><CODE>$ hex2bin=20
ej.ihx</CODE>=20
<P>After this command we should have a <CODE>ej.bin</CODE> in the =
current=20
folder, that we can rename directly to <CODE>ej.com</CODE> and execute =
it in our=20
MSX:</P><CODE>$ mv ej.bin ej.com</CODE>=20
<H5>Usage examples</H5>
<UL>
  <LI>Loading a GE5 screen without palette: <PRE>#include "types.h"
#include "mem.h"
#include "dos.h"
#include "vdp.h"

uint8_t scratch[128];

uint8_t ge5_load(char *file_name, uint8_t vramh, uint16_t vraml) {
    fcb f;
    uint8_t i;
    memset((uint8_t *) &amp;f, 0, sizeof(fcb));
    f.record_size =3D 128;
    f.drive =3D 0;
    memcpy(f.name, file_name, 11);
    if (open(&amp;f) !=3D 0)
        return 0;
    vdp_set_write_address(vramh, vraml);
    for (i =3D 0; i &lt; 213; i++) {
        if (block_set_data_ptr(scratch) !=3D 0)
            return 0;
        if (block_read(&amp;f) !=3D 0)
            return 0;
        if (i =3D=3D 0)
            vdp_load_screen(scratch + 7, 121);   // to skip GE5 header
        else
            vdp_load_screen(scratch, 128);
    }
    close(&amp;f);
    return 1;
}

int main(void) {
    vdp_set_screen5();
    ge5_load("EXAMPLE GE5", 0, 0x0000);        // load at visible VRAM
    getchar();
    vdp_set_text();
    exit(0);
}
</PRE></LI></UL>
<H5>Additional files</H5>
<UL>
  <LI>A <A href=3D"http://msx.atlantes.org/sdcc_msx/cc.bat">script</A> =
for=20
  compilation in Windows platforms by Nestor Soriano.=20
  <LI>An example <A =
href=3D"http://msx.atlantes.org/sdcc_msx/params.c">program</A>=20
  to test global data initialization and <CODE>main</CODE> function =
parameters=20
  (<CODE>crt0msx_msxdos_advanced.s</CODE>).=20
  <LI><A =
href=3D"http://msx.atlantes.org/sdcc_msx/msx_pnp_template.zip">A=20
  template</A> for the Programmer's Notepad. </LI></UL>
<H5>Greetings</H5>
<UL>
  <LI>To Manuel Pazos and Armando P&#233;rez Abad for they support in =
the interrupt=20
  handling routines.=20
  <LI>To N&#233;stor Soriano (Konami Man) for his patch for =
<CODE>main</CODE>=20
  function parameters and for solve global data initialization problem.=20
  <LI>To John Ames for the Programmer's Notepad template.=20
  <LI>To "aorante". </LI></UL>
<H5>History</H5>
<UL>
  <LI><I>August 12th 2010</I> - <CODE>memcpy</CODE>, =
<CODE>memset</CODE>,=20
  additional VDP routines and a file read example added.=20
  <LI><I>July 20th 2010</I> - Latest SDCC snapshots upgrade.=20
  <LI><I>November 25th 2009</I> - SDCC 2.9.0 upgrade.=20
  <LI><I>June 10th 2009</I> - A Programmer's Notepad template added.=20
  <LI><I>March 29th 2006</I> - <CODE>files.h</CODE> and =
<CODE>files.s</CODE> has=20
  been patched. Now <CODE>lseek</CODE> function is POSIX compliant.=20
  <LI><I>March 20th 2006</I> - Some minor changes due to SDCC version =
update=20
  <LI><I>April 14th 2005</I> - More standard I/O port addressing methods =

  <CODE>out(address, data)</CODE> and <CODE>in(address)</CODE> added.=20
  <LI><I>April 1st 2005</I> - <CODE>read</CODE> and <CODE>write</CODE> =
file=20
  access routines return type changed from "unsigned int" to "int" to =
allow=20
  negative results.=20
  <LI><I>November 22th 2004</I> - <CODE>main</CODE> function parameters =
support=20
  added and global variables initialization problem solved.=20
  <LI><I>November 16th 2004</I> - Interrupt handling routines added.=20
  <LI><I>October 26th 2004</I> - File handling routines for MSXDOS2 =
added.=20
  <LI><I>October 5th 2004</I> - Initial version. </LI></UL>
<H5>Additional info and related sites</H5>
<UL>
  <LI><A href=3D"http://sdcc.sourceforge.net/">sdcc</A>=20
  <LI><A href=3D"http://sourceforge.net/projects/hex2bin">hex2bin</A>=20
  <LI><A href=3D"http://www.emucamp.com/boukichi/cbios.htm">Port</A> of =
the SDCC=20
  backend for ROM generation (<A=20
  href=3D"http://msx.atlantes.org/sdcc_msx/msxsdcc03.zip">local =
copy</A>)=20
  <LI><A href=3D"http://map.tni.nl/resources">MSX Assembly Page</A>=20
  <LI><A href=3D"http://msx.konamiman.com/">Konamiman's page</A> (Nestor =
Soriano)=20
  who has developed a SDCC library for InterNestor Lite </LI></UL><BR>
<HR>
<BR><A name=3Dsdccmsx></A>
<CENTER>
<H4>SDCC backend for MSX ROMs</H4></CENTER>
<P>The main difference between building COM and ROM files for MSX with =
SDCC is=20
basically the <CODE>crt0</CODE> code. I recommend to read the <A=20
href=3D"http://msx.atlantes.org/index_en.html#sdccmsxdos">previous</A>=20
section.</P>
<P>In the <A href=3D"http://www.nerlaska.com/msx/">Nerlaska's MSX =
web</A> there=20
are a lot of info about this topic. Both <A=20
href=3D"http://aorante.blogspot.com/">Alberto Orante</A> and I will =
contribute=20
with additional code for building ROMs using SDCC. Here this is a =
modification=20
of the MSXDOS interrupt routines by Alberto.</P>
<UL>
  <LI><A=20
  =
href=3D"http://msx.atlantes.org/sdcc_msx/interrupt_ROM.h">interrupt_ROM.h=
</A> -=20
  Header for interrupt handling in ROMs.=20
  <LI><A=20
  =
href=3D"http://msx.atlantes.org/sdcc_msx/interrupt_ROM.s">interrupt_ROM.s=
</A> -=20
  Associated assembler. </LI></UL>
<H5>Greetings</H5>
<UL>
  <LI>To <A href=3D"http://aorante.blogspot.com/">Alberto Orante</A> for =
help=20
  supporting these projects. </LI></UL>
<H5>Additional info and related sites</H5>
<UL>
  <LI><A href=3D"http://www.nerlaska.com/msx/">Nerlaska's MSX web</A> =
</LI></UL><BR>
<HR>
<BR><A name=3Dmoonsound></A>
<CENTER>
<H4>Moonsound programming</H4></CENTER>
<P>In this section I will publish all the Moonsound related C code =
builded or=20
adapted by me. All the current published codes are related to two =
articles=20
appeared in the <B>Call MSX</B> spanish magazine about the MSX scene =
(numbers 3=20
and 4). These two articles are about Moonsound programming and all the =
source=20
codes are spanish commented (sorry for the inconvenience).</P>
<UL>
  <LI>Wave table part of the OPL4:=20
  <UL>
    <LI>Small C program <A=20
    href=3D"http://msx.atlantes.org/moonsound/ms2.c">ms2.c</A> written =
for the=20
    Hitech compiler. This program plays a piano note from the wave table =
part of=20
    the OPL4=20
    <LI>The <A =
href=3D"http://msx.atlantes.org/moonsound/yrw801.c">yrw801.c</A>=20
    code adapted from the <A =
href=3D"http://www.alsa-project.org/">ALSA</A>=20
    project source code (GPL and LGPL license) that contains the =
instrument map=20
    of the the YRW801 Moonsound's ROM chip </LI></UL>
  <LI>FM part of the OPL4:=20
  <UL>
    <LI><A =
href=3D"http://msx.atlantes.org/moonsound/ejsbi.c">ejsbi.c</A> written=20
    for the SDCC compiler. This program loads a SBI FM sound bank and =
plays a=20
    note of one random instrument=20
    <LI>SBI General MIDI standard patches included in the <A=20
    href=3D"ftp://ftp.alsa-project.org/pub/tools">alsa-tools</A> as a =
part of the=20
    <CODE>sbiload</CODE> package:=20
    <UL>
      <LI><A =
href=3D"http://msx.atlantes.org/moonsound/std.sb">std.sb</A> - The=20
      General MIDI instruments in 2 operator format=20
      <LI><A =
href=3D"http://msx.atlantes.org/moonsound/drums.sb">drums.sb</A> -=20
      The General MIDI percussion instruments in 2 operator format=20
      <LI><A =
href=3D"http://msx.atlantes.org/moonsound/std.o3">std.o3</A> - The=20
      General MIDI instruments in 4 operator format=20
      <LI><A =
href=3D"http://msx.atlantes.org/moonsound/drums.o3">drums.o3</A> -=20
      The General MIDI percussion instruments in 4 operator format=20
  </LI></UL></LI></UL></LI></UL><BR>
<HR>
<BR><A name=3Dhuffman></A>
<CENTER>
<H4>Huffman compression</H4></CENTER>
<P>In this section I will put all my work related to Huffman compression =

implementation for MSX.</P>
<P><A =
href=3D"http://msx.atlantes.org/huffman/huffman.tar.gz">huffman.tar.gz</A=
>=20
contains an ANSI-C implementation of the Huffman =
compression/uncompression=20
algorithms. This archive also contains an specific MSX implementation of =
the=20
uncompress algorithm for the SDCC compiler. This MSX targeted version=20
requires:</P>
<UL>
  <LI>The <A href=3D"http://sdcc.sourceforget.net/">SDCC</A> compiler. =
Versi&#243;n=20
  2.5.0 or later.=20
  <LI>The IntelHex to binary conversion tool <A=20
  href=3D"http://hex2bin.sourceforge.net/">hex2bin</A>. </LI></UL>
<P>Read the README at <CODE>huffman/msx</CODE> subfolder for further=20
details.</P><BR>
<HR>
<BR><A name=3Dgraphics></A>
<CENTER>
<H4>Graphics</H4></CENTER>
<P>In this section I will put source code, tools and data related to VDP =

programming.</P>
<UL>
  <LI>By taking one of the fonts at <A=20
  =
href=3D"http://hoe.pocketheaven.com/hacks/Fonts">http://hoe.pocketheaven.=
com/hacks/Fonts</A>,=20
  I have built an extended char table that covers partially the =
ISO-8859-1 (AKA=20
  Latin1) charset. By now there is only support for native spanish =
characteres:=20
  <CODE>&#225; &#233; &#237; &#243; &#250; &#252; &#193; &#201; &#205; =
&#211; &#218; &#220; &#241; &#209; &#161; &#191;</CODE> and some minor =
symbols. Here=20
  is:<BR>
  <CENTER><IMG border=3D0=20
  src=3D"http://msx.atlantes.org/vdp/latin1_charset.png"></CENTER>
  <LI><A =
href=3D"http://msx.atlantes.org/vdp/Screen2TileGenerator.tar.gz">Here</A>=
=20
  you can download a small Java tool that converts any B/W image to =
assembly=20
  data for 8x8 <CODE>screen 2</CODE> compatible tiles (1 bit per pixel, =
white =3D=20
  1, black =3D 0). <A=20
  href=3D"http://msx.atlantes.org/vdp/latin1_charset.z8a">This</A> is =
the result=20
  of applying this utility to the previous Latin1 charset table. =
</LI></UL><BR>
<HR>
<BR><A name=3Dpsg></A>
<CENTER>
<H4>PSG</H4></CENTER>
<P>PSG programming: tools and source code.</P>
<UL>
  <LI><A=20
  =
href=3D"http://msx.atlantes.org/psg/psg_sample.tar.gz">psg_sample.tar.gz<=
/A> -=20
  An example program that plays a sound sample ussing the PSG (I suggest =
to use=20
  <A href=3D"http://www.arrakis.es/~ninsesabe/pasmo/">Pasmo</A> cross =
assembler).=20
  <LI><A href=3D"http://msx.atlantes.org/psg/raw2nib.c">raw2nib.c</A> - =
A small=20
  utility to convert RAW unsigned 8-bit samples to assembler source =
valid for=20
  the previous <CODE>psg_sample</CODE>. This code uses the logaritmic =
conversion=20
  table listed at <A=20
  =
href=3D"http://map.tni.nl/articles/psg_sample.php">http://map.tni.nl/arti=
cles/psg_sample.php</A>.=20
  </LI></UL><BR>
<HR>
<BR><A name=3Dfixedpoint></A>
<CENTER>
<H4>Fixed point</H4></CENTER>
<P>Fixed point math related section. For Z80 and/or MSX specific.</P>
<UL>
  <LI><A=20
  =
href=3D"http://msx.atlantes.org/punto_fijo/punto_fijo.tar.gz">punto_fijo.=
tar.gz</A>=20
  - Implementation example of some fixed point routines in assembler =
language=20
  and an application example that solves a differential ecuations system =
using=20
  the Euler formula. Sourcecode fully compatible with <A=20
  href=3D"http://www.arrakis.es/~ninsesabe/pasmo/">Pasmo</A> GPL cross =
assembler.=20
  </LI></UL><BR>
<HR>
<BR><A name=3Ddoc></A>
<CENTER>
<H4>Documents</H4></CENTER>
<UL>
  <LI>A <A =
href=3D"http://msx.atlantes.org/minireferencia_z80_y_bios_msx.pdf">Z80=20
  and MSX BIOS minireference (spanish)</A> writen by <A=20
  href=3D"http://www.konamiman.com/">The Leader</A>. </LI></UL><BR>
<HR>
<!-- Creative Commons License -->
<CENTER><A href=3D"http://creativecommons.org/licenses/by-nc/2.0/"=20
rel=3Dlicense><IMG border=3D0 alt=3D"Creative Commons License"=20
src=3D"http://creativecommons.org/images/public/somerights20.gif"></A><BR=
>
<P>This work is licensed under a <A=20
href=3D"http://creativecommons.org/licenses/by-nc/2.0/" =
rel=3Dlicense>Creative=20
Commons License</A>.</P></CENTER><!-- /Creative Commons License =
--><BR><BR>
<P align=3Dright>Page maintained by <A=20
href=3D"mailto:avelinoherrera@gmail.com">Avelino Herrera=20
Morales</A></P></BODY></HTML>

------=_NextPart_000_0007_01CF97E3.70DEE560
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: http://msx.atlantes.org/vdp/latin1_charset.png

iVBORw0KGgoAAAANSUhEUgAAAIAAAACAAQMAAAD58POIAAAABlBMVEUAAAD///+l2Z/dAAAAAWJL
R0QAiAUdSAAAAAlwSFlzAAALEgAACxIB0t1+/AAAAAd0SU1FB9YGCAw7N89SO44AAAM5SURBVHic
zZRRixs3EMeH67L4QZh9CGEgohzBmFD2QRhnEYk43MOYezAhpFCOUoLYLIM5hDHXspiyGPwxAv0w
Tu44+mBCn0oI5shTnvIRwrnSWsoldiB5CZy0411+jGb+M5IF660B863xfcBO2puiAxIwmAvc6yUJ
AOwBSGMO6Aij/RrEFrSuNBsJJtABZpccGYUdYOLgCipAF+MqFscWVIkAsA+AqWgIbokAoTdZBhlE
+41Eg+hBGHu9xuYDUUpW8ZmULqeWkMqi4L32oD8UgoEYwgDjOJ1q9icJgRXGcIiMG1ahOnA5GYMc
MZ7FhI9icB4JdHGfWL8jqKhj2CxsppqSCyVFYrMksDMqtuL/rlb8jP34anH2AuEipp9GeX6XkBWa
8ha8adJRobW2YKRnpwSXt0fHNJ2Ox8gmujwhWLaLCVkHQmPsL8HbGd0tct0mHFLuYlS04q8vF/xM
yJeXy3Pc1bHClZotL178QQ+avYl1oBYdPqc877QHTAsF8I6KCVJ+0m0zJgRZ6flUIZ2eoEKGbhO0
MU2k7l8pCuviQJsGSLIcYs5iBxZ3XiqhsPVKPG3uTWC9q8P62P1ogsZI1DJFT9szgGA3VUgHEmk4
59UDg3GG75cS9lmZpSmaUja7OCsNgCJtRmgIY4m/2n6AKTtmgsqC+xZkAJnimWIx8XbGfnnGQ+4D
Br9fKxGb1w+wuFcrjTywO/l4DcdZJD/00z6VlQW2lmI4ngii/7pZ5PqxBlpm3AHMMEbnUa7EOBun
VylnmyV2v/7Gh1apYDaLBQvmc/fqs3Jz/rc3RkdACr2Ohvc95D5GiPIbeBA8njiP55+A2sMBHmKE
JQEoD9aNjxfY5oXb9xp+rtxeM1ulAP+Kh9gGeht0YKshHNaR/4w2dl1cY2Mwb3qwcvU4cDvEt4YO
tD2YBjDzIA+APLi0Vrl+BCGwMQeiIORWvS88KPlnvqh7+vPc94jqcDA/nbc+BychTwC07XEeYihX
Sq0DPj0Z39IP6QGvI9qHeZBakw4oD0ahfOPBJIBsHmTUcb7QD3Xdj3t1Pz4qadQnFObLoKRvpwNl
yHNd/k4/fOKxnQ48Cyf1oZ1f6Mf/OYGLvXmnEooAAAAASUVORK5CYII=

------=_NextPart_000_0007_01CF97E3.70DEE560
Content-Type: image/gif
Content-Transfer-Encoding: base64
Content-Location: http://creativecommons.org/images/public/somerights20.gif

R0lGODlhWAAfAMQWACAgILC2r9XX1VZXVpaXlu/v77zAvLi9uLK3scDEv8nNyK2yrLW6tMXJxK60
rXx8fEBAQM3QzKyyq6uxqv///wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAEA
ABYALAAAAABYAB8AAAX/oFWNZGmeaKqubJuK1STP9CTd97I4fIAgDMbhYDAkjo2kYhlpOpvLZfKY
KA6Dv0CAp1vgbrUZKVz7SnQ8hxYoHBqRjehz7oxOj4bhAYvYcr04NmQTI4MyZmc7PT9Bbm9KCk4M
AyUAAwxPUg14eXsMWWk6iIOFhjY4XT0+QHqPSk6UFQAQDxAkD5FQSZtVep99fg6iX6QxhmZoi2xC
RXBMEZQABBTU1IQVA5l3Vp6gXKNkpYPIimqMzK7PDxUQBdXvAgAVD3UK21e/wcOB4cZkiMnMsXLj
LFKDEQ3eKRSAEIo9Xlb46APEL4y4cagUrRnYLMGrCOseUChA4IEBCgIe/zwQQIHSSl0QO+Xzsw9M
v2PklAVhVjCCAFsRKMgb8UAeAAACDg4Q4HAKN4l/zBQz9SWVwEZEjEBqYotCgnkUSsZQcJICu3r3
dnoTRlGQRX9hJJy6IUxnozcemSjo+lVkygonWZqFwDSCpioy80WV+hZnVY3nHHmMk8uWgALy1tmC
YKsAQwjaIHpSzJZxY8c50qzaSaSngnXTDgygRaEWhAVh5xU+/JS0MHA1LsbNCJmN5K0RGMhyp7Aa
5gqYmnIaDWwxsdP/zNRVsxqdsyYCKA1oXk28T5ibnmahWVMu9uwZVUfuiLyBPMILbQFQUNjwtjxQ
ceGAacHBNVx8dhE02f8zAigw1AAEGPBALBA00N9DonXTRygU2fTegajIZ1xWPYFXlAkAvIRWTPis
1d5U48yViEbdKYjcExMQAOEETPVn2EN4+LLeHx2692EZOSVI4oK5zCGAjytOp6E+A17XjwtYZqnl
llhOUxsAQcVDDWfUVFDNOmZSs4CZEIxHgQEA1AZBbdV4ieac1NRSDQR2ijTmmSnN6SYFeNZGwpw6
0mmmnwO4yWYJhI7HZm6EyjmYWWFJyo5Z08xJQqaKblrBNAgUMEABno4QqVkjSCMUbYu+qdJJj35K
5qQhxamnqNPMMoKnIqU66qsi/WqWSA8UkKywhAory5jF0unlNGkSqqq3mriqFGc1ouI5FJ7KFvos
oX5WmuecE6DKbbOsygKBNClhiuyT0dryqUoMVernnLt6OgsBBRiLqLDvEhCvwJSGx+ytxuoZbbB/
1qrqrfri6qmnlhoLFrMOswqsWe4wzKawrqJ06kjjQWBABBiPOTHGfO6ZsadeMiQqxNSUHG/ExSZw
ac5nmqAtNhPOY8kAKc6jkr0nFlVUio1a8u46SSs9VNIppji0trRoS7VmX3s9NJdkl202CyEAADs=

------=_NextPart_000_0007_01CF97E3.70DEE560
Content-Type: text/css;
	charset="koi8-r"
Content-Transfer-Encoding: 7bit
Content-Location: http://msx.atlantes.org/style.css

H1 {
	FONT-FAMILY: arial, helvetica; FONT-SIZE: 20pt
}
H4 {
	FONT-FAMILY: arial, helvetica; COLOR: #808080; FONT-SIZE: 12pt
}
H5 {
	FONT-FAMILY: arial, helvetica; COLOR: #808080; FONT-SIZE: 12pt
}
P {
	FONT-FAMILY: arial, helvetica; FONT-SIZE: 11pt
}
LI {
	FONT-FAMILY: arial, helvetica; FONT-SIZE: 11pt
}
A {
	TEXT-DECORATION: none
}
PRE {
	FONT-FAMILY: courier; COLOR: #802020; FONT-SIZE: 10pt
}
CODE {
	FONT-FAMILY: courier; COLOR: #802020; FONT-SIZE: 10pt
}

------=_NextPart_000_0007_01CF97E3.70DEE560--
